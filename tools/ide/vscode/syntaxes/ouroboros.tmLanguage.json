{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ouroboros",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#syntax-levels"
    },
    {
      "include": "#math-symbols"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.ouroboros",
          "match": "\\b(if|else|elseif|while|for|foreach|do|repeat|forever|iterate|return|break|continue|switch|case|default|try|catch|finally|throw|yield|match|when)\\b"
        },
        {
          "name": "keyword.declaration.ouroboros",
          "match": "\\b(class|interface|struct|enum|namespace|using|import|type|alias|component|system|entity)\\b"
        },
        {
          "name": "keyword.modifier.ouroboros",
          "match": "\\b(public|private|protected|internal|static|const|readonly|abstract|virtual|override|sealed|async|await|ref|out|in|params)\\b"
        },
        {
          "name": "keyword.type.ouroboros",
          "match": "\\b(var|dynamic|void|bool|byte|sbyte|short|ushort|int|uint|long|ulong|float|double|decimal|char|string|object)\\b"
        },
        {
          "name": "keyword.operator.ouroboros",
          "match": "\\b(new|typeof|sizeof|nameof|is|as|null|true|false|this|base)\\b"
        },
        {
          "name": "keyword.natural.ouroboros",
          "match": "\\b(define|create|print|display|show|calculate|compute|with|takes|returns|has|extends|implements|inherits)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ouroboros",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ouroboros",
              "match": "\\\\."
            },
            {
              "include": "#string-interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.single.ouroboros",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.ouroboros",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.interpolated.ouroboros",
          "begin": "\\$\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ouroboros",
              "match": "\\\\."
            },
            {
              "include": "#string-interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.backtick.ouroboros",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "include": "#string-interpolation"
            }
          ]
        }
      ]
    },
    "string-interpolation": {
      "patterns": [
        {
          "name": "meta.interpolation.ouroboros",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ouroboros",
          "match": "0[xX][0-9a-fA-F_]+"
        },
        {
          "name": "constant.numeric.binary.ouroboros",
          "match": "0[bB][01_]+"
        },
        {
          "name": "constant.numeric.octal.ouroboros",
          "match": "0[oO][0-7_]+"
        },
        {
          "name": "constant.numeric.float.ouroboros",
          "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?[fFdD]?\\b"
        },
        {
          "name": "constant.numeric.integer.ouroboros",
          "match": "\\b\\d[\\d_]*([eE][+-]?\\d[\\d_]*)?[lLuUfFdD]?\\b"
        },
        {
          "name": "constant.numeric.infinity.ouroboros",
          "match": "∞"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.ouroboros",
          "match": "//.*$"
        },
        {
          "name": "comment.block.ouroboros",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.triple-slash.documentation.ouroboros",
          "match": "///.*$"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.ouroboros",
          "match": "(\\+|\\-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.comparison.ouroboros",
          "match": "(==|!=|<|>|<=|>=|<=>|≤|≥|≠)"
        },
        {
          "name": "keyword.operator.logical.ouroboros",
          "match": "(&&|\\|\\||!|∧|∨|¬)"
        },
        {
          "name": "keyword.operator.bitwise.ouroboros",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.assignment.ouroboros",
          "match": "(=|\\+=|\\-=|\\*=|/=|%=|\\*\\*=|&=|\\|=|\\^=|<<=|>>=|\\?\\?=)"
        },
        {
          "name": "keyword.operator.other.ouroboros",
          "match": "(\\?\\?|\\?\\.|\\||>|\\.\\.|\\.\\.<|\\+\\+|\\-\\-|::)"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.ouroboros",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.ouroboros",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.name.ouroboros",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "syntax-levels": {
      "patterns": [
        {
          "name": "meta.preprocessor.ouroboros",
          "match": "@(high|medium|low|asm)\\b"
        }
      ]
    },
    "math-symbols": {
      "patterns": [
        {
          "name": "constant.language.greek.ouroboros",
          "match": "[α-ωΑ-Ω]"
        },
        {
          "name": "keyword.operator.math.ouroboros",
          "match": "[∑∏∫∂∇√∀∃∈∉⊆⊇∪∩]"
        }
      ]
    }
  },
  "scopeName": "source.ouroboros"
} 